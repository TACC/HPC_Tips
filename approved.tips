##----
Run "dos2unix" command to convert files from Windows/DOS format to Unix format when you transfer them to TACC resources. 
##----
Use the command "du -sh" for finding out the total disk usage.
##----
Use the command "du -h --max-depth=1" to find out which directory has the largest file size.
##----
Use "!!" to repeat the most recent command. Use "!mpi" for the most recent command that started with "mpi" and "!?mpi?" for the most recent one that contained "mpi".
##----
Use the command "cat -e -t -v Makefile" to check if you have proper usage of tabs in the Makefile.
##----
Add the following include statements in your Makefile for compiling PETSc code:

include ${PETSC_DIR}/conf/variables
include ${PETSC_DIR}/conf/rules
##----
To restrict the memory that a JVM can use on a login node on Stampede, try the following: "export JAVA_TOOL_OPTIONS="-Xms2G -Xmx2G"
##----
Don't get caught flat-footed by scheduled maintenance - subscribe to announcements at https://www.tacc.utexas.edu/news/subscribe
##----
Windows user looking for robust approach to accessing Linux resources? Try running Linux virtual machine inside a host app (hypervisor) like VirtualBox or VMWare player running on your desktop.
##----
Want to mount your supercomputer directories on your desktop? Try the sshfs utility.
##----
Load your favorite modules then execute "module save". Your saved collection will now be available on your next login, or anytime you execute "module restore".
##----
Bash does not automatically source your .bashrc on login; if you want this behavior, source your .bashrc from .profile or your login startup script of choice.
##----
If "ls" takes a long time, try /bin/ls for a lean, mean, uncolorized version of ls.
##----
Before executing "rm", try "ls" with the same arguments and see if you like what you get.
##----
As long as your job is running, you can ssh to any node you own to monitor your job's progress. Try executing "top" then "1" for particularly useful display.
##----
Your MPI jobs suddenly start failing with mpispawn errors? Your rsa keys may be corrupted: to regenerate, go to $HOME then execute "mv .ssh dot.ssh.old", logout, then log back in.
##----
OMP_NUM_THREADS defaults to 1 on Lonestar and Stampede hosts (244 on MIC); be sure to export the desired value before running OpenMP jobs.
##----
MIC_OMP_NUM_THREADS defaults to 240 (offload) and 244 (native launched from host); be sure to export the desired value before running OpenMP jobs involving the Xeon Phi MIC.
##----
Avoid recursive ("-r") file transfers; collect the files into a tar archive instead.
##----
Execute "module show xxxx" to see exactly what module xxxx does to your environment.
##----
To build software in your own user space, ./configure --prefix=$WORK/myapps is often the trick you're looking for.
##----
Execute "du -sch *" to see your disk usage by directory.
##----
An alias to display your $PATH with each directory on its own line:

   $ alias prettypath="echo \\$PATH | sed 's/:/\\n/g'"
##----
Want a robust approach to backup, transfer, and version control? Give git a try, you'll be glad you did.
##----
Tired of all that typing? Did you know you can type "ml" instead of "module list" and  "ml git" instead of "module load git"
##----
Did you know TACC offers training courses for HPC? http://www.tacc.utexas.edu/user-services/training
##----
A newer version of Perl is available by running the command "module load perl"
##----
HPC Python? Yes! We have the Enthought distribution "module load python"
##----
Did you know that you can find all the bio codes installed on our system by doing:

       $ module keyword bio
##----
You can have many named collection of modules: Do "module save collectionA" to create and "module restore collectionA" to restore.
##----
To find out more about a particular module do: "module help <name>"
##----
Type "module help" to know more about the Lmod module system.
##----
Did you know that you can only have one version a module loaded at a time:

    $ module load foo/1.2; module load foo/1.4

only foo/1.4 will be loaded.
##----
Did you know that:

    $ ml -foo -bar baz qux

is the same as:

    $ module rm foo bar; module load baz qux
##----
Did you know that the "settarg" module provides TARG that dynamically changes as modules are changed.  See "module help settarg" for more info.
##----
Type "module spider XXXXX" to find all the version of module XXXXX.
##----
Chapters 2 thru 5 to the Gnu Make Manual provide a great introduction for any one wishing to understand this powerful tool. See "info make".
##----
If you want to see just the available default modules do:

   $ module -d avail
##----
If you want to see all the available module that contain the string "abc" do:

   $ module avail abc

This works for spider and list as well.
##----
You can do simple regular expression searches:

   $ module -r spider '^p'

This will list all the modules that start with the letter p.
##----
You can save more than one collection of modules, just give it a name:

   $ module save projectA

You can restore this collection of modules at any time by doing:

   $ module restore projectA
##----
It usually takes a minimum of 30 minutes for new passwords to get propagated across TACC systems.
##----
Make sure that your $HOME directory is only writable by you and ~/.ssh directory is only readable by you.  Otherwise this will disable your RSA keys and prevent normal access to compute nodes.
##----
If you need X11 to run a GUI-based app on a Stampede compute node, login with "ssh -X", use idev rather than srun, and make sure you use the development queue.
##----
To give your MPI tasks more memory, reduce the number of tasks per node: "-N 2 -n 16", for example, spreads your 16 tasks across 2 nodes, providing about twice as much memory per task as "-N 1 -n 16".
##----
If you like to work with several login sessions open, remember that changes to your environment (e.g. module commands) affect only the shell (login session) in which you make the changes.
##----
If you compile with "-mmic" you can launch your code from the host -- the runtime environment will transfer it to the MIC for you.
##----
$HOME, $WORK, and $SCRATCH are available to native MIC codes (and to users who ssh to a MIC), but are not accessible from offloaded code. The system aliases cdw and cds are not available on the MIC.
##----
View pdf files on stampede with xpdf.
##----
Linking to TACC packages? You don't have to remember their location. Just use $TACC_THATPACKAGE_DIR, $TACC_THATPACKAGE_INC, and $TACC_THATPACKAGE_LIB
##----
Want to keep tabs on your job?

   $ watch -n 10 squeue -u yourname
##----
Not sure if TACC has a package you're looking for?

  https://www.tacc.utexas.edu/resources/software

will tell you.
##----
Do "module spider" to get a complete list of all installed software on the system.
##----
Not sure which TACC machine you're logged into? Type "hostname -f".
##----
To get instant hyperlinks, compile your LaTeX files with "pdflatex" and put the following line in your source:

  \usepackage[pdftex,colorlinks]{hyperref}
##----
You can switch back to the last directory by doing:
    $ cd -
##----
Tired of typing that long directory name, use tab-completion instead:
    $ cd long<TAB>          becomes:
    $ cd longDirectoryName
##----
You can switch back to your home directory in the following three ways:
    $ cd $HOME
    $ cd ~
    $ cd
##----
No need to retype previous commands, you can use  Ctrl+R to search for them.
##----
We are doing full backup every months of your $HOME directory, with  an incremental backup every days. If you want to recover a file, you need to submit a ticket. There is no way for users to recover files.  If you request a file recovery, please provide the name, the date and an approximation of the time of the deletion.
##----
Sometime you may end up repeating the previous commands for various reasons. Following are the 4 different ways to repeat the last executed command.
  * Use the up arrow to view the previous command and press enter to execute it.
  * Type !! and press enter from the command line
  * Type !-1 and press enter from the command line.
  * Press Ctrl+P will display the previous command, press enter to execute it
##----
Sometime you find repeating the three commands over and over again.  If you type the up-arrow key three times, then it type Ctrl-O (not Ctrl-0).  It will run the current command and bring the next one in list.  This can be repeated as long as you like.
##----
Want to execute a specific command from history ?
No problem, you just have to type "history | more" and look at the corresponding number then use !n (n being the number corresponding to the command line that you want to repeat).
##----
If you want to know the process mapping of MVAPICH2, then use "export MV2_SHOW_CPU_BINDING=1" inside your script or before to launch your job.
##----
A code built with Intel MPI won't run with MVAPICH2 and vice versa! Your build environment must match your submit environment.
##----
If you have an MPI application with threads, don't forget to use tacc_affinity! See the system user guide for more details. 
##----
You can only use Intel compilers on the login nodes and the development queue. If you try on normal queue, it will fail!
##----
You can use "tail -f file_name" to follow the output to a file.
##----
You can create a multiple sub-directories at one time with "mkdir -p a/b/c".
##----
