##----
Run "dos2unix" command to convert files from Windows/DOS format to Unix format when you transfer them to TACC resources. 
##----
Use the command "du -sh" to see total disk usage for the current directory.
##----
Use the command "du -h --max-depth=1" to see disk usage for all directories in the current directory.
##----
Use "!!" to repeat the most recent command. Use "!mpi" to repeat the most recent command that started with "mpi" and "!?mpi?" for the most recent one that contained "mpi".
##----
Use the command "cat -e -t -v Makefile" to check whether you are using tabs in your Makefile.
##----
Add the following include statements in your Makefile to compile PETSc code:

include ${PETSC_DIR}/conf/variables
include ${PETSC_DIR}/conf/rules
##----
Windows user looking for a robust approach to accessing Linux resources? Try running a Linux virtual machine inside a host app (hypervisor) like VirtualBox or VMWare player running on your desktop.
##----
Want to mount your supercomputer directories on your desktop? Try the sshfs utility.
##----
Load your favorite modules then execute "module save". Your saved collection will now be available on your next login, or anytime you execute "module restore".
##----
Bash does not automatically source your .bashrc on login; if you want this behavior, source your .bashrc from .profile or the login startup script of your choice.
##----
If "ls" takes a long time, try /bin/ls for a lean, mean, uncolorized version of ls.
##----
Before executing "rm", try "ls" with the same arguments and see if you like what you get.
##----
As long as your job is running, you can ssh to any node you own to monitor your job's progress. Try executing "top" then "1" for particularly useful display.
##----
Avoid recursive ("-r") file transfers; collect the files into a tar archive instead.
##----
Execute "module show xxxx" to see exactly what module xxxx does to your environment.
##----
To build software in your own user space, ./configure --prefix=$WORK/myapps is often the trick you're looking for.
##----
Execute "du -sch *" to see your disk usage by directory.
##----
An alias to display your $PATH with each directory on its own line:

   $ alias prettypath="echo \\$PATH | sed 's/:/\\n/g'"
##----
Want a robust approach to backup, transfer, and version control? Give git or mercurial a try; you'll be glad you did.
##----
Tired of all that typing? Did you know you can type "ml" instead of "module list" and  "ml git" instead of "module load git"?
##----
You can find all installed bio codes by executing

       $ module keyword bio
##----
To find out more about a particular module execute "module help <name>"
##----
Type "module help" to learn more about the Lmod module system.
##----
Did you know that you can only have one version a module loaded at a time?

    $ module load foo/1.2; module load foo/1.4  # only foo/1.4 will be loaded.
##----
The module command:

    $ ml -foo -bar baz qux

is the same as:

    $ module rm foo bar; module load baz qux
##----
The "settarg" module stores key environment information in the variable TARG that dynamically changes as modules are changed.  See "module help settarg" for more info.
##----
Type "module spider XXXXX" to find all the versions of module XXXXX.
##----
Chapters 2 thru 5 to the Gnu Make Manual provide a great introduction for any one wishing to understand this powerful tool. See "info make".
##----
If you want to see just the available default modules execute:

   $ module -d avail
##----
If you want to see all the currently loadable modules that contain the string "abc" execute:

   $ module avail abc

This works for spider and list as well.
##----
You can do simple regular expression searches:

   $ module -r spider '^p'

This will list all the modules that start with the letter p.
##----
You can save more than one collection of modules; just give each collection a name:

   $ module save projectA

You can load this collection by executing:

   $ module restore projectA
##----
Execute "module spider" to get a complete list of all installed software on the system.
##----
To get instant hyperlinks, compile your LaTeX files with "pdflatex" and put the following line in your source:

  \usepackage[pdftex,colorlinks]{hyperref}
##----
You can switch back to the last directory by executing:
    $ cd -
##----
Tired of typing that long directory name? Use tab-completion instead:
    $ cd long<TAB>          becomes:
    $ cd longDirectoryName
##----
You can switch back to your home directory in the following three ways:
    $ cd $HOME
    $ cd ~
    $ cd
##----
No need to retype previous commands; use Ctrl+R to search for them.
##----
Here are four different ways to repeat the last executed command (press enter after each):
  * Use the up arrow
  * Type !!
  * Type !-1
  * Press Ctrl+P
##----
Here's a trick to execute the last three commands repeatedly.  Press the up-arrow key three times, then type Ctrl-O (the letter not the number).  This will execute the displayed command and bring up the next one in list. Repeat as desired.
##----
Try "history | more" to browse your recent commands together with their command numbers. To repeat a command, type !n (where "n" is the displayed command number).
##----
You can use "tail -F file_name" to follow the output to a file.
##----
You can create multiple sub-directories at one time with "mkdir -p a/b/c".
##----
You can sort the output of "ls" in various ways. The command "ls -ltr" will sort so that the most recently changed files appear first.
##----
You can list a directory sorted by file size using "ls -lShr". The "-h" option reports sizes in human-readable form (bytes, KiloBytes, MegaBytes, etc.).
##----
Normally, "ls" does not show files that begin with a "." (so-called "hidden files"). You can list these files with "ls -a".
##----
The command "ls -F" adds an extra character to mark file type: '/' for directories '*' executables and '@' for symbolic links.
##----
Creating shell aliases is often easier than remembering/typing your favorite options:
  * ll  => ls -al
  * lf  => ls -aFC
  * lt  => ls -alhtr
##----
Keeping all sources up-to-date in all locations can be difficult.  Using "git" or similar version control software can make this simple.  Simply check-in and push locally, then pull remotely.  You'll wonder how you lived without it!
##----
"DRY" is an acronym for "Don't repeat yourself"  Avoid when you can, having repeating the same steps or code in multiple places, if only to protect yourself from having to find all the places when you need to make a change six months from now (cheerfully stolen from "The Pragmatic Programmer").
##----
Bash and Zsh support string manipulation tools:  HOST="sam.domain.com"; SHOST=${HOST%%.*} => sam. Google "bash string manipulation" for more details.
##----
Did you know that emacs and vim support spell checking?
##----
Did you know that both emacs and vim support color syntax highlighting?
##----
Emacs support etags (a code database.)  M-. will jump to a function definition, M-x tags-query-replace can change strings throughout a code tree.
##----
Vim support ctags (a code database.)  ctags -R *; Ctrl-] will jump to a function definition underneath the cursor.
##----
In vi, typing "." will repeat the last edit.
##----
With the mv and cp commands, you can copy or move a group of files into a directory:  "mv file.A file.B  file.C dir"  or "cp sam.* dir"
##----
When you need to match all ".*" files except for the current directory "." or the parent directory "..", use the ".??*" file globbing pattern.  For example:  "cp .??* dot.orig" copies all the dot files in a directory named "dot.orig".
##----
To list all hidden files without matching the current or parent directory, you can execute "ls .[^.]*".  This will match .a where as ".??*" will not. 
##----
Have you every tried to find the man-page for a function that has the same name as the command?  Try "man 2 <name>" or "man 3 <name>" for example "man 2 time". 
##----
The man-pages are divided into sections: section (1) are commands; section (2) are system functions, section (3) are library functions. (e.g. man 2 time; man 3 strlen)
##----
Try "man -k <key word>" to find the command or function you are looking for.
##----
Linux like all Unix O.S. allow commands to be "piped" together where the output of one is the input next.  So  "ls | grep key | more" will print a page at a time all files that match "key".
##----
Commands like ls, mv and cp support file globbing pattern matching:
  $  ls t*      #  -> list all files that start with t
  $  ls [tx]*   #  -> list all files that do start with t or x
  $  ls [^tx]*  #  -> list all files that do NOT start with t or x
  $  ls t?.sh   #  -> list files like t1.sh t2.sh but not t22.sh
##----
