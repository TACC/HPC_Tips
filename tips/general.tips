##----
If you find it difficult to mentally parse through a colon separated list like PATH or LD_LIBRARY_PATH, you can create bash function to print each directory on its own line.

   function prettypath () { echo ${1-$PATH} | sed 's/:/\\n/g'; }

By default it pretty prints $PATH or whatever the first argument is.
##----
Run "dos2unix" command to convert files from Windows/DOS format to Unix format when you transfer them to TACC resources.
##----
Use the command "du -sh" to see total disk usage for the current directory.
##----
Use the command "du -h *" to see disk usage for all directories in the current directory.
##----
Use "!!" to repeat the most recent command. Use "!mpi" to repeat the most recent command that started with "mpi" and "!?mpi?" for the most recent one that contained "mpi".
##----
Use the command "cat -e -t -v Makefile" to check whether you are using tabs in your Makefile.
##----
Add the following include statements in your Makefile to compile PETSc code:
  include ${PETSC_DIR}/lib/petsc/conf/variables
  include ${PETSC_DIR}/lib/petsc/conf/rules
##----
Are you a Windows user looking for a robust approach to accessing Linux resources? Try running a Linux virtual machine inside a host app (hypervisor) like VirtualBox or VMWare Player running on your desktop.
##----
If you want to mount your supercomputer directories on your desktop? Try the sshfs utility.
##----
Load your favorite modules then execute "module save". Your saved collection will now be available on your next login, or anytime you execute "module restore".
##----
Bash does not automatically source your .bashrc on login; if you want this behavior, source your .bashrc from .profile or the login startup script of your choice.
##----
If "ls" takes a long time, try /bin/ls for a lean, mean, uncolorized version of ls.
##----
Before executing "rm", try "ls" with the same arguments and see if you like what you get.
##----
As long as your job is running, you can ssh to any node you own to monitor your job's progress. Try executing "top" then "1" for particularly useful display.
##----
Avoid recursive ("-r") file transfers; collect the files into a tar archive instead.
##----
Execute "module show xxxx" to see exactly what module xxxx does to your environment.
##----
To build software in your own user space, ./configure --prefix=$WORK/myapps is often the trick you're looking for.
##----
Execute "du -sch *" to see your disk usage by directory.
##----
Do you want a robust approach to backup, transfer, and version control? Give git a try; you'll be glad you did.
##----
Tired of all that typing? Did you know you can type "ml" instead of "module list" and  "ml git" instead of "module load git"?
##----
You can find all installed bio codes by executing
       $ module keyword bio
##----
To find out more about a particular module execute "module help <name>"
##----
Type "module help" to learn more about the Lmod module system.
##----
Did you know that you can only have one version a module loaded at a time?

    $ module load foo/1.2; module load foo/1.4  # only foo/1.4 will be loaded.
##----
The module command:

    $ ml -foo -bar baz qux

is the same as:

    $ module rm foo bar; module load baz qux
##----
The "settarg" module stores key environment information in the variable TARG that dynamically changes as modules are changed.  See "module help settarg" for more info.
##----
Type "module spider XXXXX" to find all the versions of module XXXXX.
##----
Chapters 2 thru 5 to the Gnu Make Manual provide a great introduction for any one wishing to understand this powerful tool. See "info make".
##----
If you want to see just the available default modules execute:

   $ module -d avail
##----
If you want to see just the list of modules but not the versions do:

   $ module overview
##----
If you want to see all the currently loadable modules that contain the string "abc" execute:

   $ module avail abc

This works for spider and list as well.
##----
You can do simple regular expression searches:

   $ module -r spider '^p'

This will list all the modules that start with the letter p.
##----
You can save more than one collection of modules; just give each collection a name:

   $ module save projectA

You can load this collection by executing:

   $ module restore projectA
##----
Execute "module spider" to get a complete list of all installed software on the system.
##----
To get instant hyperlinks, compile your LaTeX files with "pdflatex" and put the following line in your source:

  \\usepackage[pdftex,colorlinks]{hyperref}
##----
$OLDPWD is the name of the previous directory in bash and zsh.  This can be abbreviated by "~-".
    $ ls ~-
or with the cd command
    $ cd -
##----
Tired of typing that long directory name? Use tab-completion instead:
    $ cd long<TAB>          becomes:
    $ cd longDirectoryName
##----
You can switch back to your home directory in the following three ways:
    $ cd $HOME
    $ cd ~
    $ cd
##----
No need to retype previous commands; use Ctrl+R to search for them.
##----
Here are four different ways to repeat the last executed command (press enter after each):
  * Use the up arrow
  * Type !!
  * Type !-1
  * Press Ctrl+P
##----
Here's a trick to execute the last three commands repeatedly.  Press the up-arrow key three times, then type Ctrl-O (the letter not the number).  This will execute the displayed command and bring up the next one in list. Repeat as desired.
##----
Try "history | more" to browse your recent commands together with their command numbers. To repeat a command, type !n (where "n" is the displayed command number).
##----
You can use "tail -F file_name" to follow the output to a file until you type Ctrl-C.
##----
You can create a hierarchy of directories at one time with "mkdir -p a/b/c".
##----
You can create a multiple directories at one time with "mkdir -p a/{d1,d2}/{src,inc}".
This is the same as "mkdir -p a/d1/src a/d1/inc a/d2/src a/d2/inc".
##----
You can sort the output of "ls" in various ways. The command "ls -ltr" will sort so that the most recently changed files appear first.
##----
You can list a directory sorted by file size using "ls -lShr". The "-h" option reports sizes in human-readable form (bytes, KiloBytes, MegaBytes, etc.).
##----
Normally, "ls" does not show files that begin with a "." (so-called "hidden files"). You can list these files with "ls -a".
##----
The command "ls -F" adds an extra character to mark file type: '/' for directories '*' executables and '@' for symbolic links.
##----
Creating shell aliases is often easier than remembering/typing your favorite options:
  * ll  => ls -al
  * lf  => ls -aFC
  * lt  => ls -alhtr
##----
Keeping all sources up-to-date in all locations can be difficult.  Using "git" or similar version control software can make this simple.  Simply check-in and push locally, then pull remotely.  You'll wonder how you lived without it!
##----
"DRY" is an acronym for "Don't repeat yourself"  Avoid when you can, having repeating the same steps or code in multiple places, if only to protect yourself from having to find all the places when you need to make a change six months from now (cheerfully stolen from "The Pragmatic Programmer").
##----
Bash and Zsh support string manipulation tools:  HOST="sam.domain.com"; SHOST=${HOST%%.*} => sam. Google "bash string manipulation" for more details.
##----
You can remove parts of strings directly in Bash and Zsh:
  $ a=foo.bar
  $ echo ${a%%.bar}  # -> foo
  $ echo ${a##foo.}  # -> bar
##----
String removal from front of string in Bash/Zsh:
  $ x=abcABC123ABCxyz
  $ # |----|.......#   shortest match
  $ # |----------|.#   longest  match
  $ echo ${x#a*C}  # -> 123ABCxyz
  $ echo ${x##a*C} # -> xyz
##----
String removal from back of string in Bash/Zsh:
  $ x=abcABC123ABCabc
  $ # .............||   shortest match
  $ # .|------------|   longest  match
  $ echo ${x%b*c}  # -> abcABC123ABCa
  $ echo ${x%%b*c} # -> a
##----
Did you know that emacs and vim support spell checking?
##----
Did you know that both emacs and vim support color syntax highlighting?
##----
Emacs supports etags (a code database.)  M-. will jump to a function definition, M-x tags-query-replace can change strings throughout a code tree.
##----
Vim supports ctags (a code database.)  ctags -R *; Ctrl-] will jump to a function definition underneath the cursor.
##----
In vi, typing "." will repeat the last edit.
##----
With the mv and cp commands, you can copy or move a group of files into a directory:  "mv file.A file.B  file.C dir"  or "cp sam.* dir"
##----
When you need to match all ".*" files except for the current directory "." or the parent directory "..", use the ".??*" file globbing pattern.  For example:  "cp .??* dot.orig" copies all the dot files in a directory named "dot.orig".
##----
To list all hidden files without matching the current or parent directory, you can execute "ls .[^.]*".  This will match .a where as ".??*" will not.
##----
Have you every tried to find the man-page for a function that has the same name as the command?  Try "man 2 <name>" or "man 3 <name>" for example "man 2 time".
##----
The man-pages are divided into sections: section (1) are commands; section (2) are system functions, section (3) are library functions. (e.g. man 2 time; man 3 strlen)
##----
Try "man -k <key word>" to find the command or function you are looking for.
##----
Linux, like all Unix O.S., allow commands to be "piped" together where the output of one is the input next.  So  "ls | grep key | more" will print a page at a time for all file names that match "key".
##----
Commands like ls, mv and cp support file globbing pattern matching:
  $  ls t*      #  -> list all files that start with t
  $  ls [tx]*   #  -> list all files that do start with t or x
  $  ls [^tx]*  #  -> list all files that do NOT start with t or x
  $  ls t?.sh   #  -> list files like t1.sh t2.sh but not t22.sh
##----
Did you know that you can edit the command line with emacs or vi commands?  By default, bash uses emacs style editing.  Use "set -o vi" to switch to vi style.  See www.gnu.org/software/bash/manual/html_node/Command-Line-Editing.html for more details.
##----
Need to view a graphics file (jpg and such)? Use the "display" command.
##----
Need override the definition of C compiler in a Makefile, just do:  "make CC=mpicc"
##----
Having trouble figuring out how a macro is being expanded?  Try pasting the line into a terminal and adding a "-E". For example try changing "mpicc -DFOO -DBAR -c foo.c" into "mpicc -DFOO -DBAR -E foo.c > foo.i" and look at the "foo.i" file.
##----
If your build process is failing and you know that you need some extra include directories, try setting CPATH to be colon separated list of directories.  Both the intel and gcc compilers will use the list as include paths (i.e. -I/foo/bar)
##----
If your build process is failing and you know that you need some extra library directories, try setting LIBRARY_PATH to be colon separated list of directories.  Both the intel and gcc compilers will use the list as library directories (-L/foo/bar).
##----
You can set CDPATH to be a list of parent directories that contain sub-directories to which you like to cd regularly.  For example if you set "CDPATH=.:~/a:~/b", then you can switch from ~/a/foo to ~/b/bar with "cd bar", then back with "cd foo".  Just define CDPATH (for example in your ~/.bashrc); do not export it.
##----
If you want to measure how long a command takes, do:
   $ time a.out
##----
If you want to know if two files are exactly the same use "cmp".  It is faster than diff.
##----
Aliases can be very helpful.  For example, these commands in your ~/.bashrc will allows you to go backward inside your directory more quickly.
  alias cd2="cd ../.."
  alias cd3="cd ../../.."
##----
Would you combine mkdir and cd with a single command? You can use the following function in bash or zsh:
  function mkdircd () { mkdir -p "$1" && eval cd "$1"; }
##----
You are writing too fast and misspelled the path of your directory while working in an interactive bash session?
Try the following command "shopt -s cdspell" and bash  will try several minor spelling corrections to see if it can find the actual directory.
##----
Want to know the date or time from your terminal? Use the command "date"
##----
If you want to know more about a bash command ? try to use the "--help" command. For example with mkdir:
  $ mkdir --help
##----
If you want to know detailed information about a file do: "stat your_file_or_dir" to find out the create, access and modify times, permission etc.
##----
Want to compare 2 files? You can use diff.
  $ diff [options] file1 file2

Note: You can use the option -w in the diff command to ignore the white space while  performing the comparison.
##----
If you want to display the current time in the prompt? You can use the following command: export PS1="\\u@\\h [\\$(date +%k:%m:%S)]$ "
   doe@login1 [14:04:43]$
##----
There are several visual diff tools: meld, kdiff3, fldiff.  meld and kdiff3 are pretty.   fldiff will handle a files with huge number of diffs quickly.
##----
Emacs offers the "ediff mode" to quickly merge files.
##----
Vimdiff is a vi based tool to merge files.
##----
Did you know that bash sources your ~/.profile or ~/.bash_profile for login shells but only directly sources ~/.bashrc on interactive shells?
##----
C-shell users: did you know that C-shell sources your ~/.cshrc on EVERY kind of shell: login, interactive, non-interactive shells?
##----
Did you know that bash sources the file pointed to by the environment variable BASH_ENV when running a bash shell script but not a sh shell script?
##----
Since bash sources ~/.bashrc on every sub-shell, you can prevent path duplication by putting in guard if statements:
   if [ -z "${__INIT+x}" ]; then
      export __INIT=1
      export PATH=$HOME/bin:$PATH
   fi
##----
In bash, the ~/.bash_profile or ~/.profile file is sourced on login shells and ~/.bashrc is sourced on non-login interactive shells.  You may wish to source your ~/.bashrc inside your ~/.bash_profile or ~/.profile startup script so that you get the same behavior on both kinds of interactive shells.
##----
Many times you'll want the last word on the previous command: "mkdir abc; cd abc".  Instead of retyping the last word over, you can use Meta-period  (M-.).  This keystroke will cycle through the last word on previous commands.  Note that on many keyboard Meta is the "Alt" key and on a Mac it may be the "command" key.
##----
Bash scripts can do simple arithmetic ($k is 21):  i=1; j=2; ((k=j*10+i)); echo $k;
##----
A common error in a bash script is to put spaces around "=".  Right: A=10, Wrong: A = 10
##----
In a bash script, you can capture the output of a command with either:
   WD=`pwd`
   WD=$(pwd)
##----
Many unix command will report their version with "--version":
   $ ls --version
   ls (GNU coreutils) 8.4
##----
The gnu and intel compilers support "-dumpversion" option to just report the version.
##----
The module command supports "-t" or "--terse" for easy parsing.
##----
The module command supports "-q" or "--quiet" option for silencing warnings.
##----
The terminal text can be cleared by typing "Ctrl+L".  It is the same as the command "clear".
##----
To prevent a command from being saved in your command history, put a space before the comand:
   $ <space>command
##----
To bypass any alias (but not shell function) for "foo" do "\\foo".
##----
To bypass any alias and shell function for any executable do "command foo".
##----
To bypass any alias and shell function for any shell built-in foo like cd or ls do "builtin foo".
##----
To delete the previous word use "Ctrl+W"
##----
To end an ssh connection do: "<enter>~."
##----
To print a file with line numbers do:
  $ nl <file>
or
  $ cat -n <file>
##----
A complex if then else block in a shell script can be written  on one line as:
   $ [[ test ]] && if_true_do_this || otherwise_to_that
##----
To find broken symlinks do:
   $ find . -type l -xtype l
##----
To swap the two characters on the command line do: Ctrl+T
##----
To diff two variables do: "diff <(echo $a) <(echo $b)"
##----
The web site www.commandlinefu.com has command line gems.  Click on "All-Time greats" for the most popular tips.
##----
A Bash user should consider using `type' instead of `which'. In particular `type -a' find out all the path locations, functions and alias of the `ls' command by doing:
   $ type -a ls
##----
To print a random number between 1 and X do:
   $ echo $[RANDOM%X+1]
##----
Use Ctrl+U to clear the current line.
##----
To run a command in a different directory and jump back to the current directory, use parentheses to create a sub-shell:
   $ (cd ~/project; make)
##----
When running a for loop in multiple directories, it may be helpful to use parentheses to create a sub-shell:
   $ for d in d1 d2 d3 ; do  ( cd $d; do_some_command_here; ); done
##----
To reset a "borked" terminal try either:
   $ reset
or
   $ ctrl+j stty sane ctrl+j
or
   $ ctrl+j tput reset ctrl+j
##----
To learn the vi editor, do:
   $ vimtutor
##----
To learn emacs do
   $ emacs
Then inside emacs do:
      Ctrl+H t         to run the tutorial
      Ctrl+X Ctrl+C    to exit emacs
##----
If you want to know what MACROS are predefined by the GCC and Intel C compilers?  Do
   $ gcc -dM -E - < /dev/null  > gcc_defined_macros.txt
   $ icc -dM -E - < /dev/null  > icc_defined_macros.txt
##----
To list just the sub-directories in the current directory do:
   $ ls -d */
##----
The command below will report the number of lines in the file foo.txt
   $ wc -l foo.txt
##----
You easily find the longest line in a file by executing:
    $ wc -L <file>
##----
Use the "lscpu" command to report information about the CPU under linux.
##----
You can use "module try-load foo" when you wish to load "foo" if available.  No error is reported if "foo" doesn't exist.
##----
To debug a bash script add the command "set -xv" where you'd like to start tracking and "set +xv" where you'd like to stop tracking.
##----
Use Ctrl+E to go the end of the command line.
##----
Use Ctrl+A to go the beginning of the command line.
##----
$OLDPWD or ~- is the name of the previous directory in bash or zsh. A neat trick is to use this with the diff commmand:
    $ diff ~- foo.txt
is the same as:
    $ diff $OLDPWD/foo.txt foo.txt
##----
You can put a # at the beginning of a line to save it in the history.  This is handy when typing a long command and you need to look something up.  You can do this easily in bash with M-# (a.k.a. Esc # or Alt-#).
##----
To clear the screen type Ctrl+L or the command clear.
##----
All users can use the following to find the location of a command:
   $ whereis ls
##----
This up shell function can change directory quickly up the directory tree: "up 2" is the same as "cd ../..". Extra bonus points if you understand how the printf trick works.
    up() { cd $(eval "printf '../'%.0s {1..$1}") && pwd }
##----
To delete a file named -foo you can do either rm ./-foo or rm -- -foo but not rm -foo.  Why?
##----
If you make changes to your ~/.bashrc, you can test it immediately by:
    $ source ~/.bashrc
##----
You should never name a program "test".  All shells have "test" as a built-in which means the shell will find the built-in before your command.
##----
If you really must name a program "test", then it can be run with ./test, assuming that program "test" is in the current directory.
##----
Are you having trouble figuring out why your link went bad?  Try adding -Wl,--trace to your link line and capture the output.
##----
Create a nifty overview of the hardware on your system and open the "hardware.html" in a browser:
    $ lshw -html > hardware.html
##----
You can open a file and jump to the first place that matches a pattern with:
    $ vi +/pattern <file>
##----
You can open a file and jump to a particular line with:
    $ vi +10 <file>
##----
You can open a file and jump to a particular line with:
    $ emacs +10 <file>
##----
For those of you who use vi you might consider creating this alias to close a terminal:
    $ alias ':q'=exit
##----
To place the NUM-th argument from the most recent command do  <Alt>+<NUM>+<.>:
   $ echo a b c
   $ cat <Alt>+2+<.>
Becomes:
   $ cat b
##----
You can make sure a parameter has a value by putting this in a shell script:
   param=${param:-$(read -p "Enter parameter: ")}; echo "$REPLY"
##----
A very portable way to find what shell you running is to do:
   $  my_shell=$(basename $(ps -p $$ -ocomm=)); echo $my_shell
##----
If you really want to know what shell you are currently running on a Linux system do:
   $ readlink -f /proc/$$/exe

If you want just the name of the shell w/o the full path then do:
   $ SHELL_NAME=$(readlink -f /proc/$$/exe); echo ${SHELL_NAME##*/}

Even fancier (in zsh) you can combine the above in one command:
   $ echo ${$(readlink -f /proc/$$/exe)##*/}
##----
It is possible to have an alias the same as the name of the command.  For example, you can redefine the tail command to always print a screen worth of text by doing:

   tail() { command tail -n $(($LINES - 2)) "$@"; }

The "command" command tells bash (and zsh) to ignore any aliases or shell functions when trying to resolve "tail".  Bonus points for knowing what "$(($LINES - 2)) does!
##----
It is possible to redefine a shell builtin function by using the "builtin" command.  For example you can redefine the cd command to handle pasting in the path to a file when you want to "cd" to the directory containing the file:

cd () {
     [ -n "$1" ] && [ -f "$1" ] && set -- "${1%/*}"
     builtin cd "$@"
}

This function strips the file part from the directory when the argument is a file, then the built-in cd command is called.
##----
If you have added a command to your path but can't find it, try:

   $ hash -r

to re-build bash's internal memory of where commands are.
##----
To run the previous command repeatly until it exits successfully do:
    $ until !!; do :; done
##----
If you set "shopt -s autocd" in the bash shell, then you'll be able to change directories by just typing the name of the directory.
##----
A nice way to debug shell scripts is to define the bash shell function "shdebug" shown below.

   shdebug() { env PS4=' ${BASH_SOURCE}:${LINENO}(${FUNCNAME[0]}) ' sh -x $1; }

This will give the file, line number and function name for each line in a shell script.  To use do:

    $ shdebug /path/to/bash_shell_script
##----
You can get the status of the last command with "$?".  It is 0 for success and non-zero for failure:
    $ echo "$?"
##----
You can send the output of a command to standard error with:
    $ echo "This will be written to stderr" 1>&2
##----
You can send the output of both stderr and stdout to a file with:
    $ executable >& output
##----
You can record what gets written to a terminal session with the command "script" and the output will be recorded to a file "typescript".
    $ script
##----
To clear the text from the current position to the end of line do: Ctrl+K
##----
In bash, one can compute the substring by doing:
    $ A="abcdef"
    $ echo ${A:0:-1}      # -> abcde
    $ echo ${A:1:${#A}}   # -> bcdef
##----
Another way to follow a growing file is to use:
    $ less +F <file>
This is just like tail -F but it allows you to move back and forth in the file.
##----
To see how to control an ssh session type:  <enter>~?
##----
If you use vi you might find the vim graphical cheat-sheet useful: http://www.viemu.com/vi-vim-cheat-sheet.gif
##----
Have you ever run a group of command with a pipe and need to check the status of one of them?

   $ sbatch job | tee file.log

Using $? will return the status of the tee command.  ${PIPESTATUS[0]} will return the status of the sbatch command in bash.
##----
Suppose you are building a program in one directory and running it in another.  You can wrap commands in parentheses to run those commands in a subshell:
   $ (cd SomeDirectory; git pull; make); a.out
##----
In bash and zsh you can define one or more environment variables for just one command:
   $ VAR1=V1 VAR2=V2 command
##----
You can remove all but one file under bash with:
   $ rm -f !(survivor.txt)
##----
Extract the current day month and year with one command line in bash:
   $ read day month year <<< $(date +'%d %m %y')
##----
If you are a vi user, you might like to know that you can control info with vi style keybindings with:
   $ info --vi-keys
##----
If you would like to what kind of Linux computer you are currently running on, you can do:
   $ lsb_release -a
##----
You can have ls ignore certain patterns:
   $ ls -I *.gz
##----
You can have ls list all files except . and ..
   $ ls -A
##----
Did you know that you can run command from inside vi without exiting?
  :! ls -l
results in listing the files in the current directory. pressing "enter" will get you back into vi.
##----
Python 2 reaches end-of-life on January 1, 2020.  Please consider converting all your python2 scripts into python3.
##----
A bash user can find all the commands available to them by doing:
  $ compgen -c
A user might like to know all the commands that have "_info" as part of the its name:
  $ compgen -c | grep _info
##----
A zsh user can find all the commands available to them by doing:
  $ whence -pm '*'
A user might like to know all the commands that have "_info" as part of the its name:
  $ whence -pm '*' | grep _info
##----
You can use the "command" key on a Mac keyboard to be a "Meta" key.  See https://www.emacswiki.org/emacs/MetaKeyProblems for details.
This can make editting on the command line easier by making a single keystroke Meta-b rather than Escape then b.
##----
You can use the "Alt" key on a Linux keyboard in X-windows to be a "Meta" key.  See https://www.emacswiki.org/emacs/MetaKeyProblems for details.
This can make editting on the command line easier by making a single keystroke Meta-b rather than Escape then b.
##----
Suppose you wish to remove all trailing blanks in your *.c and *.h files. You can use the find command with the sed command with in place editing and regular expressions to this.  Starting in the current directory you can do:

  $ find . -name *.[ch] -exec sed -i -e 's/ \\+$//' {} \\;

The find command locates all the *.c and *.h files in the current directory and below. The -exec option run the sed command replacing {} with the name of each file.  The -i option tells sed to make the changes in place. The s/ \\+$// tells sed to replace one or blanks at the end of the line with nothing. The \\; is required to let find know where the end of the text for the -exec option.
##----
Python 2 reached end-of-life on January 1, 2020.  You can place the following at the top of all your python3 scripts to have them run under either python3 or python2. (See https://stackoverflow.com/a/47886254)
    #!/bin/sh
    # This file is python 2/3 bilingual.
    # The line """:" starts a comment in python and is a no-op in shell.
    """:"
    # Shell code to find and run a suitable python on this file.
    for cmd in python3 python python2; do
       command -v > /dev/null $cmd && exec $cmd $0 "$@"
    done

    echo "Error: Could not find a valid python interpreter!" >&2
    exit 2
    ":""" # this line ends the python comment and is a no-op in shell.

    # ... python code ...
    from __future__ import print_function
##----
Emacs allows users to enter UTF-8 character with the sequence C-x 8 ... For example, C-x 8 ~ n produces ñ. C-x 8 RET followed by either the code point in hex or the name of the official Unicode name of the character.
##----
The utility 'file' reports a file's type. With the option -z it will try to look inside zipped files.
##----
To print the first 7 lines of a file do:
    $ sed -7q file.txt
or
    $ head -n 7 file.txt
##----
Sometimes you need a list of names of files containing a string. In that case use the "-l" option to grep which prints only the names of matching files, not the matching line:
    $ grep -l malloc *.c

This can be embedded in other other commands:
    $ tar fc mallocfiles.tar $( grep -l malloc *.c )
or
    $ emacs $(grep -l malloc *)
##----
When writing bash shell script, it can be handy to set the exit on error flag at the top of your script:

    #!/bin/bash
    set -e

This way your script will abort at the first error, rather than having the script continue.
##----
When writing bash shell script, it can be handy to set the exit on unknown variable at the top of your script:

    #!/bin/bash
    set -u

This way your script will abort when it finds an unknown variable, that you have probably misspelled.
##----
To show what lines are duplicated in a sorted file do:
   $ uniq -d file.txt
##----
To show what lines are duplicated in an unsorted file do:
   $ awk 'a[$0]++' file.txt
or
   $ sort file.txt | uniq -d
##----
Did you know that you can use the TAB key to finish an environment variable?

   $ cd $SCR<tab> will complete to cd $SCRATCH

assuming that $SCRATCH is defined and there are no other variables that start with SCR.  If is more than one, hitting <TAB> twice will list all choices.
##----
Git is a way to manage your source code.  Here is a blog describing how to undo mistakes with git:
   https://github.blog/2015-06-08-how-to-undo-almost-anything-with-git/
##----
When using regular expressions many characters are special.  However in a character class they are not special.
For example [.?] matches a dot or a question mark.
##----
Learn vim in a browser:  openvim.com
##----
When using the command find, you can search for case-sensitive files with -name and case-insensitive with -iname
##----
To search for directories with find, specify -type d. To search for files, specify -type f.
##----
To show C preprocessor paths do:
   $ gcc -E -v ...
##----
To learn more about the unix you are running try typing:
   $ uname -a
##----
A list of common mistakes made in bash scripts can be found at:
   http://mywiki.wooledge.org/BashPitfalls
For example, what should you do instead of:
   if [[ $foo > 7 ]]; then ... fi
##----
How one might manage errors in a bash script:
   https://www.jtrocinski.com/posts/Bash-Error_handling_in_scripts.html
##----
The command sdiff shows diff side by side
##----
Emacs: Move forward and backwards by paragraph:
   Alt-} and Alt-{
##----
You can use cat -E to show line endings.
##----
Tilde expansion of the user's home directory only works at the beginning of a word.  So export FOO=~/bar is wrong.  Instead do either
    FOO=~/bar; export FOO # Right!
    export FOO=$HOME/bar  # Right!
##----
You can use cp -u to copy files that do not exist in the new directory or are newer than there existing counterparts.
##----
The command mv -i will move files and ask for confirmation before overwriting an existing file.
##----
To get hex dump of a file named foo do:
   $ od -x foo
##----
You can get the UTC time with:
   $ date -u
##----
You can change the size of the font in Emacs: C-x C-+ to increase, C-x C-- to decrease.
##----
Regular expression tip: [a-z] matches all lower case letters, [-az] only matches '-','a', or'z'.
##----
Bash users can get a time stamp for their history of commands:
  * Add HISTTIMEFORMAT="%Y-%m-%d %T " to your ~/.bashrc and re-login
  * $ history
##----
Zsh users can get a time stamp for their history of commands:
  % history -i
##----
Show tabs in a filw with:
   $ cat -T foo.txt
##----
The sed program is very useful tool to remove trailing spaces or perform string substitutions. Like changing night for day from an "old" file to a "new" file
    sed 's/night/day/g'  < old > new

To learn how to use this tool, please see:
    https://www.grymoire.com/Unix/Sed.html
##----
The sed program can be used to remove leading and trailing blanks and tabs from "somefile":
   % sed -i -e 's/^[ \t]*//;s/[ \t]*$//' somefile
the -i option cause the change to happen in-place, directly to "somefile"
##----
The program "wc" does more than  word counts. It also provides he number of characters and lines.
##----
If you just need a line count "wc -l" is much faster than "wc" which returns the number of characters, words and lines.
##----
The gnu "ls -X" command will group files by extenstion.
##----
If you would like to report the measured time in a shell script, you can do this in a bash script:

   t1=$(date +%s)                     # epoch start time in seconds

   # process you wish to time.

   t2=$(date +%s)                     # epoch end time in seconds
   numSec=$(echo $t2 - $t1 | bc -q )  # the number of seconds the process took.
   runTime=$(date -ud @$numSec +%T)   # Convert the seconds into Hours:Mins:Sec
   echo "Time to build: $runTime ($numSec seconds)"
##----
The day of the year can be reported with:
   % date +%j
##----
You can the Linux date program to do things like:
   % date -d 'today + 90 days'
##----
You can generate your bash prompt (PS1) with a drag and drop interface:  https://bashrcgenerator.com
##----
A neat trick is to make your bash prompt be RED when the last command has an error by adding the following to your ~/.bashrc:
if [ -n "$PS1" ]; then
   __COLORIZE_EXIT_STATUS()
   {
      [[ 0 == "$1" || 130 == "$1" ]] && printf -- "$NONE" || printf -- "$RED"
   }
   RED=$'\\033[1;31m'
   NONE=$'\\033[0m'
   PS1='\\u@\\[$(__COLORIZE_EXIT_STATUS $?)\\]\\h\\[${NONE}\\]\\$ '
fi
##----
If you are tired of using git stash when switching between git branches, use "git worktree ..." to manages git branches instead.
With worktrees, you don't have to commit or stash changes when switching between branches. You switch between branches by changing directories.

There are many ways to use worktrees.  Here is on example. In the top of a git repo do:
   $ git worktree add .worktree/testing   # This open or creates the "testing" branch
   $ cd .worktree/testing
   # make changes in the testing branch
   $ git add .; git commit -m 'new features from testing branch'; git push
   $ cd ../..  # back to the main branch
   $ git worktree remove testing  # remove the testing branch from your source tree

Remember to add .worktree to your .gitignore file.  Youtube has several tutorial videos on how this works.
Also see: https://opensource.com/article/21/4/git-worktree
##----
A nice short tutorial for better bash scripting can be found here: http://robertmuth.blogspot.com/2012/08/better-bash-scripting-in-15-minutes.html
##----
"The enjoyment of one's tools is an essential ingredient of successful work." -- Donald E. Knuth
##----
A good resource for dealing with linking issue for Linux or Mac OS can be found here:
https://rosshemsley.co.uk/posts/linking/
##----
A one-liner to report lines that contain non-ASCII text, with line numbers using awk for the file myfile.txt
   $ cat myfile.txt | awk '/[^\\x00-\\x7f]/ {print NR, $0}'
##----
The sed command can be used to delete lines:
    $ sed '/spam/d' < in.txt > out.txt    # Remove lines with "spam"
    $ sed '/^ *$/d' < in2.txt > out2.txt  # Remove blank links
##----
The programming language AWK is great for one liners for example:
     awk  -F":" '{print $2}' file.txt    # print the second column separated by colons

To learn idiomatic AWK see:
   https://backreference.org/2010/02/10/idiomatic-awk/index.html
##----
The programming language AWK is great for one liners for example:
     awk  -F":" '{print $2}' file.txt    # print the second column separated by colons

A collections of useful one liners can be found here:
    http://tuxgraphics.org/~guido/scripts/awk-one-liner.html   
##----
Show the C preprocessor include paths:  cpp -v
##----
